syntax = "proto3";
package openOBD.v1;
option java_package = "com.jifeline.OpenOBD.Communication";
option java_multiple_files = true;

import "v1/Communication/Messages/Isotp.proto";
import "v1/Communication/Messages/Raw.proto";
import "v1/Communication/Messages/Kline.proto";
import "v1/Communication/Messages/Terminal15.proto";
import "v1/Communication/Messages/Tp20.proto";
import "v1/Communication/Messages/Doip.proto";
import "v1/Messages/Empty.proto";

service can {
  /*
  The `openIsotpStream` RPC service opens a bidirectional stream of *IsotpMessage* messages. It is used in ISO-TP communication where
  the client can rely on openOBD to handle the ISO-TP frames. The client only needs to concern itself with the payload (e.g. UDS) that is being sent and received.
   */
  rpc openIsotpStream(stream IsotpMessage) returns (stream IsotpMessage) {}
  /*
  The `openRawStream` RPC service opens a bidirectional stream of *RawFrame* messages. These messages can be used to send and receive raw CAN frames.
  This gives more control over the actual data that is being sent and received on the CAN bus. On the other hand, the client needs to implement more handling, as aspects such as multi-frames are not handled by openOBD.
  */
  rpc openRawStream(stream RawFrame) returns (stream RawFrame) {}
  /*
  The `openTp20Stream` RPC service opens a bidirectional stream of *Tp20Message* messages. It is used in TP2.0 communication where the client can
  rely on openOBD to handle the data channel management. The client only needs to supply an initial address and any further payloads that will be sent and received
   */
  rpc openTp20Stream(stream Tp20Message) returns (stream Tp20Message) {}
}

service kline {
  /*
  Opens a bidirectional stream which enables communication with a K-Line ECU.
   */
  rpc openKlineStream(stream KlineMessage) returns (stream KlineMessage) {}
}

service terminal15 {
  /*
  Opens a stream that provides information on the ignition status (terminal 15).
   */
  rpc openTerminal15Stream(EmptyMessage) returns (stream Terminal15Message) {}
}

service doip {
  /*
  Opens a bidirectional stream to communicate with an ECU using DoIP.
   */
  rpc openDoipStream(stream DoipMessage) returns (stream DoipMessage) {}
}
